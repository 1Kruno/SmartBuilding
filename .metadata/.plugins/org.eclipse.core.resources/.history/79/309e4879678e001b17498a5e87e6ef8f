package SBServers;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Properties;

import javax.jmdns.JmDNS;
import javax.jmdns.ServiceInfo;

import SB.grpc.APICleanAllRoomsResponse;
import SB.grpc.APICleanSelectedRoomsResponse;
import SB.grpc.CleanAllRooms;
import SB.grpc.CleanSelectedRooms;
import SB.grpc.roombaGrpc.roombaImplBase;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;


public class RoombaServer extends roombaImplBase
{
	public static ArrayList <Integer> rooms = new ArrayList<>();
	public static int hallwayroomba = 0;
	public static int kitchenroomba = 1;
	public static int wcroomba = 2;
	public static int livingroomroomba = 3;
	public static int bedroom1roomba = 4;
	public static int bedroom2roomba = 5;
	
	public static ArrayList <Integer> roomnames = new ArrayList<>();
	public static String hallway = "hallway";
	public static String kitchen = "kitchen";
	public static String wc = "bathroom";
	public static String livingroom = "living room";
	public static String bedroom1 = "bedroom 1";
	public static String bedroom2 = "bedroom 2";

	public static void main(String[] args) 
	{
		hallwayroomba = 0;
		kitchenroomba = 0;
		wcroomba = 0;
		livingroomroomba = 0;
		bedroom1roomba = 0;
		bedroom2roomba = 0;
		
		RoombaServer rs = new RoombaServer();
		Properties rp = rs.getRoombaProperties();
		rs.registerRoombaService(rp);
		int rport = Integer.valueOf(rp.getProperty("sservice_port"));
		
		try
		{
			Server rserver = ServerBuilder.forPort(rport).addService(rs).build().start();
			System.out.println("Roomba Server started, listening on " + rport);
			rserver.awaitTermination();
		}
		catch (IOException e) 
		{
			System.out.println("We have an input/output error: " + e.getMessage());
			e.printStackTrace();
		} 
		catch (InterruptedException e) 
		{
			System.out.println("Server connection was interrupted: " + e.getMessage());
			e.printStackTrace();
		}

	}
	
	private Properties getRoombaProperties() 
	{
		Properties rp = null;		
		 try (InputStream input = new FileInputStream("src/main/resources/roomba.properties")) 
		 {
			 rp = new Properties();

	            // load a properties file
			 rp.load(input);

	            // get the property value and print it out
	            System.out.println("Roomba properties ...");
	            System.out.println("\t service_type: " + rp.getProperty("sservice_type"));
	            System.out.println("\t service_name: " + rp.getProperty("sservice_name"));
	            System.out.println("\t service_description: " + rp.getProperty("sservice_description"));
		        System.out.println("\t service_port: " + rp.getProperty("sservice_port"));

	     } 
		 catch (IOException ex) 
		 {
			 System.out.println("We have an input/output error: ");
	         ex.printStackTrace();
	     }
		 return rp;
	}
	
	private  void registerRoombaService(Properties rp) 
	{
		 try 
		 {
	            // Create a JmDNS instance
	            JmDNS jmdns = JmDNS.create(InetAddress.getLocalHost());
	            
	            String sservice_type = rp.getProperty("sservice_type");
	            String sservice_name = rp.getProperty("sservice_name");
	           // int service_port = 1234;
	            int sservice_port = Integer.valueOf( rp.getProperty("sservice_port"));

	            String sservice_description_properties = rp.getProperty("sservice_description");
	            
	            // Register a service
	            ServiceInfo serviceInfo = ServiceInfo.create(sservice_type, sservice_name, sservice_port, sservice_description_properties);
	            jmdns.registerService(serviceInfo);
	            
	            System.out.printf("registrering service with type %s and name %s \n", sservice_type, sservice_name);
	            
	            // Wait a bit
	            Thread.sleep(1000);

	            // Unregister all services
	            //jmdns.unregisterAllServices();

	     } 
		 catch (IOException e) 
		 {
			 	System.out.println("We have an input/output error: " + e.getMessage());
	     } 
		 catch (InterruptedException e) 
		 {
			 	System.out.println("Server connection was interrupted: ");
				e.printStackTrace();
		 }
	}
	
	public void clean(StreamObserver<CleanSelectedRooms> requestObserver, StreamObserver<APICleanSelectedRoomsResponse> responseObserver)
	{
		
	}
	
	public void cleanAll(StreamObserver<CleanAllRooms> requestObserver, APICleanAllRoomsResponse response )
	{
		
	}

}
