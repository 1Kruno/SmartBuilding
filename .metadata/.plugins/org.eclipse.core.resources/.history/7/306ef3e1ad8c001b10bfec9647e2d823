package SBServers;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.util.Properties;

import javax.jmdns.JmDNS;
import javax.jmdns.ServiceInfo;

import SB.grpc.APILightsResponse;
import SB.grpc.SwitchRequest;
import SB.grpc.lightsGrpc.lightsImplBase;

import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;


public class LightsServer extends lightsImplBase
{
	public static void main(String[] args)
	{
		LightsServer ls = new LightsServer();
		Properties lp = ls.getProperties();
		ls.registerService(lp);
		int lport = Integer.valueOf(lp.getProperty("service_port"));
		
		try 
		{
			System.out.println("Running 1");
			Server server = ServerBuilder.forPort(lport).addService(ls).build().start();
			System.out.println("Lights Server started, listening on " + lport);
			server.awaitTermination();
		} 
		catch (IOException e) 
		{
			System.out.println("Running 2");
			System.out.println("We have an input/output error: " + e.getMessage());
			e.printStackTrace();
		} 
		catch (InterruptedException e) 
		{
			System.out.println("Running 3");
			System.out.println("Server connection was interrupted: " + e.getMessage());
			e.printStackTrace();
		}
	}
	
	private Properties getProperties() 
	{
		Properties lp = null;		
		 try (InputStream input = new FileInputStream("src/main/resources/lights.properties")) 
		 {
			 System.out.println("Running 4");
	            lp = new Properties();

	            // load a properties file
	            lp.load(input);

	            // get the property value and print it out
	            System.out.println("Lights properties ...");
	            System.out.println("\t service_type: " + lp.getProperty("service_type"));
	            System.out.println("\t service_name: " + lp.getProperty("service_name"));
	            System.out.println("\t service_description: " + lp.getProperty("service_description"));
		        System.out.println("\t service_port: " + lp.getProperty("service_port"));

	     } 
		 catch (IOException ex) 
		 {
			 System.out.println("Running 5");
	         ex.printStackTrace();
	         System.out.println("We have an input/output error: " + ex.getMessage());
	     }
		 return lp;
	}
	
	private void registerService(Properties lp) 
	{
		
		 try 
		 {
			 System.out.println("Running 6");
	            // Create a JmDNS instance
	            JmDNS jmdns = JmDNS.create(InetAddress.getLocalHost());
	            
	            String service_type = lp.getProperty("service_type");
	            String service_name = lp.getProperty("service_name");
	           // int service_port = 1234;
	            int service_port = Integer.valueOf( lp.getProperty("service_port"));

	            String service_description_properties = lp.getProperty("service_description");
	            
	            // Register a service
	            ServiceInfo serviceInfo = ServiceInfo.create(service_type, service_name, service_port, service_description_properties);
	            jmdns.registerService(serviceInfo);
	            
	            System.out.printf("registrering service with type %s and name %s \n", service_type, service_name);
	            
	            // Wait a bit
	            Thread.sleep(1000);

	            // Unregister all services
	            //jmdns.unregisterAllServices();
	     } 
		 catch (IOException e) 
		 {
			 System.out.println("Running 7");
	            System.out.println("We have an input/output error: " + e.getMessage());
	     } 
		 catch (InterruptedException e) 
		 {
			 System.out.println("Running 8");
			 	System.out.println("Server connection was interrupted: ");
				e.printStackTrace();
		 }
	}
	
	public void lightswitch(SwitchRequest switchrequest, StreamObserver<APILightsResponse> responseObserver)
	{
		System.out.println("Running 9");
		
		System.out.println("Receiving info from the client " + switchrequest.getLightsstatus() + " , " + switchrequest.getLightsroom());
		APILightsResponse reply = APILightsResponse.newBuilder().setResponsemessage("Request received and processed.").build();
		responseObserver.onNext(reply);
		responseObserver.onCompleted();
		System.out.println("Running 10");
	}
	
	

}
