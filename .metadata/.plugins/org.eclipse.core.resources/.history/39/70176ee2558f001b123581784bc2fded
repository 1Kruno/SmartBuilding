package SB.grpc;

import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler (version 1.15.0)",
    comments = "Source: blinds.proto")
public final class blindsGrpc {

  private blindsGrpc() {}

  public static final String SERVICE_NAME = "blinds";

  // Static method descriptors that strictly reflect the proto.
  private static volatile io.grpc.MethodDescriptor<SB.grpc.BlindsSwitchRequest,
      SB.grpc.APIBlindsResponse> getBlindsswitchMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "blindsswitch",
      requestType = SB.grpc.BlindsSwitchRequest.class,
      responseType = SB.grpc.APIBlindsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<SB.grpc.BlindsSwitchRequest,
      SB.grpc.APIBlindsResponse> getBlindsswitchMethod() {
    io.grpc.MethodDescriptor<SB.grpc.BlindsSwitchRequest, SB.grpc.APIBlindsResponse> getBlindsswitchMethod;
    if ((getBlindsswitchMethod = blindsGrpc.getBlindsswitchMethod) == null) {
      synchronized (blindsGrpc.class) {
        if ((getBlindsswitchMethod = blindsGrpc.getBlindsswitchMethod) == null) {
          blindsGrpc.getBlindsswitchMethod = getBlindsswitchMethod = 
              io.grpc.MethodDescriptor.<SB.grpc.BlindsSwitchRequest, SB.grpc.APIBlindsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "blinds", "blindsswitch"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  SB.grpc.BlindsSwitchRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  SB.grpc.APIBlindsResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new blindsMethodDescriptorSupplier("blindsswitch"))
                  .build();
          }
        }
     }
     return getBlindsswitchMethod;
  }

  private static volatile io.grpc.MethodDescriptor<SB.grpc.ShutAllBlinds,
      SB.grpc.APIShutAllBlinds> getBlindsswitchallMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "blindsswitchall",
      requestType = SB.grpc.ShutAllBlinds.class,
      responseType = SB.grpc.APIShutAllBlinds.class,
      methodType = io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
  public static io.grpc.MethodDescriptor<SB.grpc.ShutAllBlinds,
      SB.grpc.APIShutAllBlinds> getBlindsswitchallMethod() {
    io.grpc.MethodDescriptor<SB.grpc.ShutAllBlinds, SB.grpc.APIShutAllBlinds> getBlindsswitchallMethod;
    if ((getBlindsswitchallMethod = blindsGrpc.getBlindsswitchallMethod) == null) {
      synchronized (blindsGrpc.class) {
        if ((getBlindsswitchallMethod = blindsGrpc.getBlindsswitchallMethod) == null) {
          blindsGrpc.getBlindsswitchallMethod = getBlindsswitchallMethod = 
              io.grpc.MethodDescriptor.<SB.grpc.ShutAllBlinds, SB.grpc.APIShutAllBlinds>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(
                  "blinds", "blindsswitchall"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  SB.grpc.ShutAllBlinds.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  SB.grpc.APIShutAllBlinds.getDefaultInstance()))
                  .setSchemaDescriptor(new blindsMethodDescriptorSupplier("blindsswitchall"))
                  .build();
          }
        }
     }
     return getBlindsswitchallMethod;
  }

  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static blindsStub newStub(io.grpc.Channel channel) {
    return new blindsStub(channel);
  }

  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static blindsBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new blindsBlockingStub(channel);
  }

  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static blindsFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new blindsFutureStub(channel);
  }

  /**
   */
  public static abstract class blindsImplBase implements io.grpc.BindableService {

    /**
     */
    public void blindsswitch(SB.grpc.BlindsSwitchRequest request,
        io.grpc.stub.StreamObserver<SB.grpc.APIBlindsResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getBlindsswitchMethod(), responseObserver);
    }

    /**
     */
    public void blindsswitchall(SB.grpc.ShutAllBlinds request,
        io.grpc.stub.StreamObserver<SB.grpc.APIShutAllBlinds> responseObserver) {
      asyncUnimplementedUnaryCall(getBlindsswitchallMethod(), responseObserver);
    }

    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getBlindsswitchMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                SB.grpc.BlindsSwitchRequest,
                SB.grpc.APIBlindsResponse>(
                  this, METHODID_BLINDSSWITCH)))
          .addMethod(
            getBlindsswitchallMethod(),
            asyncServerStreamingCall(
              new MethodHandlers<
                SB.grpc.ShutAllBlinds,
                SB.grpc.APIShutAllBlinds>(
                  this, METHODID_BLINDSSWITCHALL)))
          .build();
    }
  }

  /**
   */
  public static final class blindsStub extends io.grpc.stub.AbstractStub<blindsStub> {
    private blindsStub(io.grpc.Channel channel) {
      super(channel);
    }

    private blindsStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected blindsStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new blindsStub(channel, callOptions);
    }

    /**
     */
    public void blindsswitch(SB.grpc.BlindsSwitchRequest request,
        io.grpc.stub.StreamObserver<SB.grpc.APIBlindsResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getBlindsswitchMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     */
    public void blindsswitchall(SB.grpc.ShutAllBlinds request,
        io.grpc.stub.StreamObserver<SB.grpc.APIShutAllBlinds> responseObserver) {
      asyncServerStreamingCall(
          getChannel().newCall(getBlindsswitchallMethod(), getCallOptions()), request, responseObserver);
    }
  }

  /**
   */
  public static final class blindsBlockingStub extends io.grpc.stub.AbstractStub<blindsBlockingStub> {
    private blindsBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }

    private blindsBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected blindsBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new blindsBlockingStub(channel, callOptions);
    }

    /**
     */
    public SB.grpc.APIBlindsResponse blindsswitch(SB.grpc.BlindsSwitchRequest request) {
      return blockingUnaryCall(
          getChannel(), getBlindsswitchMethod(), getCallOptions(), request);
    }

    /**
     */
    public java.util.Iterator<SB.grpc.APIShutAllBlinds> blindsswitchall(
        SB.grpc.ShutAllBlinds request) {
      return blockingServerStreamingCall(
          getChannel(), getBlindsswitchallMethod(), getCallOptions(), request);
    }
  }

  /**
   */
  public static final class blindsFutureStub extends io.grpc.stub.AbstractStub<blindsFutureStub> {
    private blindsFutureStub(io.grpc.Channel channel) {
      super(channel);
    }

    private blindsFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected blindsFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new blindsFutureStub(channel, callOptions);
    }

    /**
     */
    public com.google.common.util.concurrent.ListenableFuture<SB.grpc.APIBlindsResponse> blindsswitch(
        SB.grpc.BlindsSwitchRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getBlindsswitchMethod(), getCallOptions()), request);
    }
  }

  private static final int METHODID_BLINDSSWITCH = 0;
  private static final int METHODID_BLINDSSWITCHALL = 1;

  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final blindsImplBase serviceImpl;
    private final int methodId;

    MethodHandlers(blindsImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_BLINDSSWITCH:
          serviceImpl.blindsswitch((SB.grpc.BlindsSwitchRequest) request,
              (io.grpc.stub.StreamObserver<SB.grpc.APIBlindsResponse>) responseObserver);
          break;
        case METHODID_BLINDSSWITCHALL:
          serviceImpl.blindsswitchall((SB.grpc.ShutAllBlinds) request,
              (io.grpc.stub.StreamObserver<SB.grpc.APIShutAllBlinds>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }

  private static abstract class blindsBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoFileDescriptorSupplier, io.grpc.protobuf.ProtoServiceDescriptorSupplier {
    blindsBaseDescriptorSupplier() {}

    @java.lang.Override
    public com.google.protobuf.Descriptors.FileDescriptor getFileDescriptor() {
      return SB.grpc.Blinds.getDescriptor();
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.ServiceDescriptor getServiceDescriptor() {
      return getFileDescriptor().findServiceByName("blinds");
    }
  }

  private static final class blindsFileDescriptorSupplier
      extends blindsBaseDescriptorSupplier {
    blindsFileDescriptorSupplier() {}
  }

  private static final class blindsMethodDescriptorSupplier
      extends blindsBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
    private final String methodName;

    blindsMethodDescriptorSupplier(String methodName) {
      this.methodName = methodName;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.MethodDescriptor getMethodDescriptor() {
      return getServiceDescriptor().findMethodByName(methodName);
    }
  }

  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;

  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (blindsGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
              .setSchemaDescriptor(new blindsFileDescriptorSupplier())
              .addMethod(getBlindsswitchMethod())
              .addMethod(getBlindsswitchallMethod())
              .build();
        }
      }
    }
    return result;
  }
}
